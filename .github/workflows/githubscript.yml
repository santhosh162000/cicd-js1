name: Release using custom scripts (Version Bump)

on:
  workflow_dispatch

jobs:
  determine_version:
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.bump_version.outputs.new_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Determine version
        uses: oprypin/find-latest-tag@v1
        with:
          repository: santhosh162000/cicd-js1  # The repository to scan.
          releases-only: true  # We know that all relevant tags have a GitHub release for them.
        id: javascript1  # The step ID to refer to later.  

      - name: Get Latest Commit Message
        id: latest_commit_message
        run: |
          echo "::set-output name=commit_message::$(git log --format=%B -n 1)"

      - name: Extract Version Components
        id: extract_version
        run: |
          CURRENT_VERSION=${{ steps.javascript1.outputs.tag }}
          MAJOR=$(echo $CURRENT_VERSION | awk -F. '{print $1}')
          MINOR=$(echo $CURRENT_VERSION | awk -F. '{print $2}')
          PATCH=$(echo $CURRENT_VERSION | awk -F. '{print $3}')
          echo "MAJOR=$MAJOR"
          echo "MINOR=$MINOR"
          echo "PATCH=$PATCH" 
          echo "Commit=${{ steps.latest_commit_message.outputs.commit_message }}"     

      - name: Bump Version
        id: bump_version
        run: |
          COMMIT_MESSAGE="${{ steps.latest_commit_message.outputs.commit_message }}"
          CURRENT_VERSION=${{ steps.javascript1.outputs.tag }}
          MAJORWORD=$(echo $CURRENT_VERSION | awk -F. '{print $1}')
          MINOR=$(echo $CURRENT_VERSION | awk -F. '{print $2}')
          PATCH=$(echo $CURRENT_VERSION | awk -F. '{print $3}')
          echo "MAJOR=$(echo "$MAJORWORD" | grep -o '[0-9]*')"
          echo "MAJOR1=$MAJOR"
          echo "MINOR=$MINOR"
          echo "PATCH=$PATCH"

          if [[ $COMMIT_MESSAGE == "testing3" ]]; then
            MAJOR=$(($MAJOR + 1))
            MINOR=$MINOR
            PATCH=$PATCH
          elif [[ $COMMIT_MESSAGE == "testing" ]]; then
            MAJOR=$((MAJOR))
            MINOR=$(($MINOR + 1))
            PATCH=$PATCH
          else
            MAJOR2=$MAJOR1
            MINOR=$MINOR
            PATCH=$(($PATCH + 1))
            echo "$MAJOR"
            echo "$MINOR"
            echo "$PATCH"
          fi

          NEW_VERSION="${MAJOR2}.${MINOR}.${PATCH}"
          echo "$NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

  create_release:
    needs: determine_version
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - env:
          OUTPUT1: ${{needs.determine_version.outputs.output1}}
        run: echo "$OUTPUT1"  
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.determine_version.outputs.output1 }}
          release_name: Release v${{ needs.determine_version.outputs.output1 }}
          body: |
            Add release notes or description here
          draft: false
          prerelease: false
